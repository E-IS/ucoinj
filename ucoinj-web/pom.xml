<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

	<parent> 
		<groupId>io.ucoin</groupId>
		<artifactId>ucoinj</artifactId> 
		<version>1.0-SNAPSHOT</version>
	</parent>

  <groupId>io.ucoin</groupId>
  <artifactId>ucoinj-web</artifactId>
  <packaging>war</packaging>
  <name>UCoin Java Client :: Web</name>

  <properties>
    <performRelease>false</performRelease>
    <jetty.reload>automatic</jetty.reload>

    <!-- bundle configuration -->
    <bundlePrefix>ucoinj-web-${project.version}</bundlePrefix>
    <bundle.jvmArgs>-server -Xmx1g -Xms512m -XX:MaxPermSize=128M -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=50 -XX:+ScavengeBeforeFullGC -XX:+CMSScavengeBeforeRemark</bundle.jvmArgs>

    <!-- Unit test -->
    <ucoin.log.file>${project.build.directory}/${bundlePrefix}.log</ucoin.log.file>
    <wicket.configuration>development</wicket.configuration>
  </properties>

  <dependencies>
    <dependency>
      <groupId>io.ucoin</groupId>
      <artifactId>ucoinj-core</artifactId>
      <version>${project.version}</version>
    </dependency>

    <!-- Elastic Search -->
    <dependency>
      <groupId>org.elasticsearch</groupId>
      <artifactId>elasticsearch</artifactId>
    </dependency>

    <!-- WICKET DEPENDENCIES -->
    <dependency>
      <groupId>org.apache.wicket</groupId>
      <artifactId>wicket-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.wicket</groupId>
      <artifactId>wicket-extensions</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.wicket</groupId>
      <artifactId>wicket-auth-roles</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.wicket</groupId>
      <artifactId>wicket-ioc</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.wicket</groupId>
      <artifactId>wicket-datetime</artifactId>
    </dependency>
    <dependency>
      <groupId>org.wicketstuff</groupId>
      <artifactId>wicketstuff-restannotations-json</artifactId>
    </dependency>
    <dependency>
      <groupId>com.googlecode.wicket-jquery-ui</groupId>
      <artifactId>wicket-jquery-ui</artifactId>
      <version>${wicket.version}</version>
    </dependency>

	  <!-- GoogleGSON for WICKET-JQUERY link -->
    <dependency>
      <groupId>com.google.code.gson</groupId>
      <artifactId>gson</artifactId>
    </dependency>

    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
    </dependency>

    <!-- LOGGING DEPENDENCIES - SLF4J -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
    </dependency>
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
    </dependency>

	  <!-- JUNIT DEPENDENCY FOR TESTING -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty.aggregate</groupId>
      <artifactId>jetty-all</artifactId>
    </dependency>

  </dependencies>
  <build>
    <finalName>${project.parent.artifactId}-${project.version}</finalName>
    <resources>
      <resource>
        <directory>src/main/filtered-resources</directory>
        <filtering>true</filtering>
        <includes>
          <include>*.properties</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
        <includes>
          <include>*.properties</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>false</filtering>
        <includes>
          <include>**/*</include>
        </includes>
        <excludes>
          <exclude>*.properties</exclude>
        </excludes>
      </resource>
      <resource>
        <directory>src/main/java</directory>
        <filtering>false</filtering>
        <includes>
          <include>**</include>
        </includes>
        <excludes>
          <exclude>**/*.java</exclude>
        </excludes>
      </resource>
    </resources>
    <testResources>
      <testResource>
        <filtering>false</filtering>
        <directory>src/test/resources</directory>
      </testResource>
      <testResource>
        <filtering>false</filtering>
        <directory>src/test/java</directory>
        <includes>
          <include>**</include>
        </includes>
        <excludes>
          <exclude>**/*.java</exclude>
        </excludes>
      </testResource>
    </testResources>

    <plugins>
      <plugin>
        <artifactId>maven-war-plugin</artifactId>
        <configuration>
		      <!-- excludes the Eclipse output directory -->
          <warSourceExcludes>WEB-INF/classes/**/*.*</warSourceExcludes>
          <warSourceIncludes>**/*.*</warSourceIncludes>
          <filteringDeploymentDescriptors>true</filteringDeploymentDescriptors>
          <warName>${bundlePrefix}</warName>
          <webResources>
            <resource>
              <filtering>true</filtering>
              <directory>src/main/webapp/META-INF</directory>
              <targetPath>META-INF</targetPath>
              <includes>
                <include>context.xml</include>
              </includes>
            </resource>
          </webResources>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <profiles>

    <!-- Run the war into a jetty server -->
    <profile>
      <id>run</id>
      <properties>
        <jetty.docroot>${project.build.directory}/jetty-docroot</jetty.docroot>
        <jetty.forked.debug.port>4000</jetty.forked.debug.port>
        <jetty.forked.jvmArgs>
          -XX:+HeapDumpOnOutOfMemoryError -Xrunjdwp:transport=dt_socket,address=${jetty.forked.debug.port},server=y,suspend=n
        </jetty.forked.jvmArgs>

      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-resources-plugin</artifactId>
            <version>2.4.3</version>
            <executions>
              <execution>
                <!-- need to filtering web.xml before launching jetty -->
                <id>prepare-jetty-docroot</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${jetty.docroot}</outputDirectory>
                  <resources>
                    <resource>
                      <directory>${project.basedir}/src/main/webapp</directory>
                      <filtering>true</filtering>
                      <includes>
                        <include>WEB-INF/web.xml</include>
                      </includes>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-maven-plugin</artifactId>
            <configuration>
              <war>target/${project.parent.artifactId}-${project.version}.war</war>
              <!-- required to run jetty:stop goal -->
              <stopPort>9696</stopPort>
              <stopKey>ucoinj</stopKey>
              <systemProperties>
                <systemProperty>
                  <name>ucoinj-web.config</name>
                  <value>${project.basedir}/src/test/resources/ucoinj-web.config</value>
                </systemProperty>
                <systemProperty>
                  <name>jetty.port</name>
                  <value>8080</value>
                </systemProperty>
                <systemProperty>
                  <name>log4j.configuration</name>
                  <value>${project.basedir}/src/test/resources/log4j.properties</value>
                </systemProperty>
              </systemProperties>
              <jvmArgs>${jetty.forked.jvmArgs}</jvmArgs>
              <reload>${jetty.reload}</reload>
              <useProvidedScope>true</useProvidedScope>
              <webXml>${jetty.docroot}/WEB-INF/web.xml</webXml>
              <!-- Add log4j.properties (from test resources)
              <extraClasspath>${project.basedir}/src/test/resources/log4j.properties</extraClasspath>-->
              <scanTargetPatterns>
                <scanTargetPattern>
                  <directory>${project.basedir}/target/classes</directory>
                </scanTargetPattern>
                <scanTargetPattern>
                  <directory>${project.basedir}/src/main/webapp</directory>
                  <excludes>
                    <exclude>**/*.css</exclude>
                    <exclude>**/*.png</exclude>
                    <exclude>**/*.jpg</exclude>
                  </excludes>
                </scanTargetPattern>
              </scanTargetPatterns>
            </configuration>
            <dependencies>
              <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>${slf4j.version}</version>
              </dependency>
              <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-log4j12</artifactId>
                <version>${slf4j.version}</version>
              </dependency>
              <dependency>
                <groupId>log4j</groupId>
                <artifactId>log4j</artifactId>
                <version>${log4j.version}</version>
              </dependency>
            </dependencies>
            <executions>
              <execution>
                <id>run</id>
                <phase>prepare-package</phase>
                <goals>
                  <!--goal>run-forked</goal-->
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>add-release-properties</id>
      <activation>
        <property>
          <name>performRelease</name>
          <value>true</value>
        </property>
      </activation>
      <properties>
        <!-- configure log file for tomcat -->
        <ucoin.log.file>$\{catalina.base\}/logs/${bundlePrefix}.log</ucoin.log.file>
        <!-- wicket servlet into deployment configuration -->
        <wicket.configuration>deployment</wicket.configuration>
      </properties>
    </profile>

    <profile>
      <id>minimized-web-resources</id>
      <activation>
        <!-- FIXME BL : unable this cause a StackOverflowException
         property>
          <name>performRelease</name>
          <value>true</value>
        </property-->
      </activation>
      <build>
        <defaultGoal>package</defaultGoal>
        <plugins>
          <plugin>
            <groupId>net.alchim31.maven</groupId>
            <artifactId>yuicompressor-maven-plugin</artifactId>
            <executions>
              <execution>
                <goals>
                  <goal>compress</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
			  <!-- Don't output in the default webapp location, since the war plugin 
				will overwrite the files in there with the original, uncompressed ones. -->
              <webappDirectory>${project.build.directory}/generated-sources/webapp</webappDirectory>
              <jswarn>false</jswarn>
              <statistics>false</statistics>
			  <!-- Overwrite existing files -->
              <nosuffix>true</nosuffix>
			  <!-- paths to js and css files (inside src/main/webapp) -->
              <includes>
                <!--<include>**/*.js</include> LPT 22/08/2013 : javaScript file compression excluded because jquery.tokeninput.js or jquery.watermark.js fails on web render -->
                <include>**/*.css</include>
              </includes>
              <excludes>
				<!-- exclude somes js with errors -->
                <exclude>**/CPPlaybar.js</exclude>
				<!-- exclude minized js and other files -->
                <exclude>**/*.min.js</exclude>
                <exclude>**/*.min.css</exclude>
                <exclude>**/*.java</exclude>
                <exclude>**/*.html</exclude>
                <exclude>**/*.properties</exclude>
                <exclude>**/*.xml</exclude>
                <exclude>**/*.png</exclude>
                <exclude>**/*.gif</exclude>
                <exclude>**/*.jpg</exclude>
                <exclude>**/*.jpeg</exclude>
              </excludes>
            </configuration>
          </plugin>
          <plugin>
            <groupId>com.tunyk.mvn.plugins.htmlcompressor</groupId>
            <artifactId>htmlcompressor-maven-plugin</artifactId>
            <configuration>
              <goalPrefix>htmlcompressor</goalPrefix>
              <removeComments>true</removeComments>
              <encoding>utf-8</encoding>
              <compressCss>true</compressCss>
              <compressJavaScript>true</compressJavaScript>
              <javascriptHtmlSprite>false</javascriptHtmlSprite>
              <removeIntertagSpaces>true</removeIntertagSpaces>
              <predefinedPreservePatterns>
                <predefinedPreservePattern>SERVER_SCRIPT_TAG_PATTERN</predefinedPreservePattern>
              </predefinedPreservePatterns>
              <fileExt>
                <fileExt>html</fileExt>
              </fileExt>
            </configuration>
            <executions>
              <execution>
                <id>HTML compression (from files in src/main/webapp)</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>html</goal>
                </goals>
                <configuration>
                  <srcFolder>${project.basedir}/src/main/webapp</srcFolder>
                  <targetFolder>${project.build.directory}/generated-sources/webapp</targetFolder>
                </configuration>
              </execution>
              <execution>
                <id>HTML compression (from files found in classpath)</id>
                <phase>compile</phase>
                <goals>
                  <goal>html</goal>
                </goals>
                <configuration>
                  <srcFolder>${project.basedir}/src/main/java</srcFolder>
                  <targetFolder>${project.build.directory}/classes</targetFolder>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <artifactId>maven-war-plugin</artifactId>
            <configuration>
			  <!-- Add minified resources into the final WAR -->
              <webResources>
                <resource>
                  <directory>${project.build.directory}/generated-sources/webapp</directory>
                  <targetPath>/</targetPath>
                  <filtering>false</filtering>
                </resource>
                <resource>
                  <filtering>true</filtering>
                  <directory>src/main/webapp/META-INF</directory>
                  <targetPath>META-INF</targetPath>
                  <includes>
                    <include>context.xml</include>
                  </includes>
                </resource>
              </webResources>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

</project>
